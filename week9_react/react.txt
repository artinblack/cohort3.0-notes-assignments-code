- this is the foundation for react 
- understanding react from examples 

jargon we'll learn today 
- jsx 
- class vs className 
- static vs dynamic websites 
- state 
- components 
- re-rendering 

why do you need react ? 
- for static websites you don't need websites
- for dynamic websites, these libraries make it easier to do DOM manipulation

react is just an easier way to write normal HTML/CSS and JS it is a new syntax , that under the hood gets converted to HTML,CSS and JS 

why react ? 
- people realized it is harder to do DOM manipulation the conventional way 
- before react there were many frameworks 
- eventually vuejs created a new syntax to do frontends 
- the react compiler convert the code to HTML/CSS/JS 

problem with dom approach 
- too much code you have to write as the developer 
- as your app scales , this gets harder and harder 

static - no content on a page is never changing synchronously or asynchronously 
dynamic - the content on a page is continuously changing or reappearing with user actions and the user is able to play with the websites 

Some react jargon 
- to create a react app , you usually need to worry about two things 

State :- Recoil , redux , creators of frontend frameworks realized that all websites can effectively be divided in to two parts 
- it is an object that represents the current state of the application it represents the dynamic things in your application ( things that change ) for example , the value of the counter 
- the state variable is the number of the counter 
- anything on the website that changes is called state 
- {
    count : 4 
}
- anything that changes on the website is the state of the code and website 
- linkedin - notifications number is the state 
- {
    topbar : {
        home : 0 , 
        myNetwork : "999+" 
        jobs : 0 , 
        messaging : 0 , 
        notifications : 10 
    }
}
- the way react is written is that when you change anything on the above object the frontend (html) will also change the home features making it dynamic 
- it makes your code very readable because the developer just needs to change your state 

Components :- Component library 
- how a DOM element should render , given a state it is a re-usable , dynamic , code snippet that changes given the state 
- react is a dom updation engine 
- diff calculator basically  
- when the state changes the component will also rerender 
- this button is a component it takes the state as an input and is supposed to render accordingly 
- state + component = react website 
- a state change triggers a re-render 
- a re-render represents the actual DOM being manipulated when the state changes 
You usually have to define all your components once and then all you have to do is update the state of your app, React takes care of re-rendering your app
virtual dom - react taking care of the dom manipulation 

- Jsx syntax is a cleaner way to write components
- a component return's xml 

JSX stands for javascript xml . It is a syntax extension for JavaScript , most commonly used with React , a popular javascript library for building user interfaces. JSX allows you to write HTML like code directly within JavaScript. This makes it easier to create and manage the user interface in React applications . 

useState hook - creates and updates the state of a component/react website 

react part 2 
- useState 
- useeffect 
- props 
- conditional rendering 
- children 
- lists and keys 
- inline styling 
- class based vs functional components 
- error boundary 
- fragment 

- npm create vite@latest

- useState hook 
    - is a hook that lets you add state to functional components . it returns an array with the current state and a function to update it. 

- hooks 
    - functions that allow you to "hook into" react state and lifecycle features from functional components

- component 
    - a react component is a function that returns you a html 